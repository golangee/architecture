// Code generated by golangee/eearc; DO NOT EDIT.
//
// Copyright 2021 Torben Schinke
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	fmt "fmt"
	uuid "github.com/golangee/uuid"
)

// ticketsIdNotFoundError indicates that an operation expected an element with the according id.
// ticketsIdNotFoundError is also a Tickets.
type ticketsIdNotFoundError struct {
	// cause refers to a causing error or nil.
	cause error
}

// Tickets marks this type to belong to the sum type of Tickets.
// This implementation always returns true.
func (_ ticketsIdNotFoundError) Tickets() bool {
	return true
}

// IdNotFound returns true, if it represents an IdNotFound case.
// This implementation always returns true.
func (_ ticketsIdNotFoundError) IdNotFound() bool {
	return true
}

// Unwrap unpacks the cause or returns nil.
func (e ticketsIdNotFoundError) Unwrap() error {
	return e.cause
}

// Error returns the conventional description of this error.
func (e ticketsIdNotFoundError) Error() string {
	return "IdNotFound"
}

// ticketsDuplicateIdError indicates that an operation expected a unique identifier.
// ticketsDuplicateIdError is also a Tickets.
type ticketsDuplicateIdError struct {
	// id the according identifier
	id uuid.UUID

	// cause refers to a causing error or nil.
	cause error
}

// ID returns the value of id.
// ID the according identifier
func (e ticketsDuplicateIdError) ID() uuid.UUID {
	return e.id
}

// Tickets marks this type to belong to the sum type of Tickets.
// This implementation always returns true.
func (_ ticketsDuplicateIdError) Tickets() bool {
	return true
}

// DuplicateId returns true, if it represents a DuplicateId case.
// This implementation always returns true.
func (_ ticketsDuplicateIdError) DuplicateId() bool {
	return true
}

// Unwrap unpacks the cause or returns nil.
func (e ticketsDuplicateIdError) Unwrap() error {
	return e.cause
}

// Error returns the conventional description of this error.
func (e ticketsDuplicateIdError) Error() string {
	return fmt.Sprintf("DuplicateId: id=%v", e.id)
}

// ticketsStringNotFoundError indicates that an operation expected a exact string element which was not found.
// ticketsStringNotFoundError is also a Tickets.
type ticketsStringNotFoundError struct {
	// str the related string
	str string

	// cause refers to a causing error or nil.
	cause error
}

// Str returns the value of str.
// Str the related string
func (e ticketsStringNotFoundError) Str() string {
	return e.str
}

// Tickets marks this type to belong to the sum type of Tickets.
// This implementation always returns true.
func (_ ticketsStringNotFoundError) Tickets() bool {
	return true
}

// StringNotFound returns true, if it represents a StringNotFound case.
// This implementation always returns true.
func (_ ticketsStringNotFoundError) StringNotFound() bool {
	return true
}

// Unwrap unpacks the cause or returns nil.
func (e ticketsStringNotFoundError) Unwrap() error {
	return e.cause
}

// Error returns the conventional description of this error.
func (e ticketsStringNotFoundError) Error() string {
	return fmt.Sprintf("StringNotFound: str=%v", e.str)
}

// ticketsOtherError indicates any other unclassified error, like I/O failures etc.
// ticketsOtherError is also a Tickets.
type ticketsOtherError struct {
	// cause refers to a causing error or nil.
	cause error
}

// Tickets marks this type to belong to the sum type of Tickets.
// This implementation always returns true.
func (_ ticketsOtherError) Tickets() bool {
	return true
}

// Other returns true, if it represents a Other case.
// This implementation always returns true.
func (_ ticketsOtherError) Other() bool {
	return true
}

// Unwrap unpacks the cause or returns nil.
func (e ticketsOtherError) Unwrap() error {
	return e.cause
}

// Error returns the conventional description of this error.
func (e ticketsOtherError) Error() string {
	return "Other"
}
