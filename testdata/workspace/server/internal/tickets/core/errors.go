// Code generated by golangee/eearc; DO NOT EDIT.
//
// Copyright 2021 Torben Schinke
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package core

import (
	errors "errors"
	fmt "fmt"
	uuid "github.com/golangee/uuid"
)

// TicketsError represents the sum type behavior of all Tickets errors.
type TicketsError interface {
	// Tickets returns true, if the error belongs to the sum type of Tickets.
	Tickets() bool

	// Unwrap unpacks the cause or returns nil.
	Unwrap() error

	// Error returns the conventional description of this error.
	Error() string
}

// AsTicketsError finds the first error in err's chain that matches any TicketsError behavior.
// Returns nil if no such error is found.
func AsTicketsError(err error) TicketsError {
	var match TicketsError
	if errors.As(err, &match) && match.Tickets() {
		return match
	}

	return nil
}

// TicketsIdNotFoundError indicates that an operation expected an element with the according id.
type TicketsIdNotFoundError interface {
	// IdNotFound returns true, if it represents an IdNotFound case.
	IdNotFound() bool

	TicketsError
}

// AsTicketsIdNotFoundError finds the first error in err's chain that matches anyTicketsIdNotFoundError behavior.
// Returns nil if no such error is found.
func AsTicketsIdNotFoundError(err error) TicketsIdNotFoundError {
	var match TicketsIdNotFoundError
	if errors.As(err, &match) && match.Tickets() && match.IdNotFound() {
		return match
	}

	return nil
}

// ticketsIdNotFoundError indicates that an operation expected an element with the according id.
// ticketsIdNotFoundError is also a TicketsError.
type ticketsIdNotFoundError struct {
	// cause refers to a causing error or nil.
	cause error
}

// Tickets returns true, if the error belongs to the sum type of Tickets.
// This implementation always returns true.
func (_ ticketsIdNotFoundError) Tickets() bool {
	return true
}

// IdNotFound returns true, if it represents an IdNotFound case.
// This implementation always returns true.
func (_ ticketsIdNotFoundError) IdNotFound() bool {
	return true
}

// Unwrap unpacks the cause or returns nil.
func (e ticketsIdNotFoundError) Unwrap() error {
	return e.cause
}

// Error returns the conventional description of this error.
func (e ticketsIdNotFoundError) Error() string {
	return "IdNotFound"
}

// TicketsDuplicateIdError indicates that an operation expected a unique identifier.
type TicketsDuplicateIdError interface {
	// ID returns the value of id.
	// ID the according identifier
	ID() uuid.UUID

	// DuplicateId returns true, if it represents a DuplicateId case.
	DuplicateId() bool

	TicketsError
}

// AsTicketsDuplicateIdError finds the first error in err's chain that matches anyTicketsDuplicateIdError behavior.
// Returns nil if no such error is found.
func AsTicketsDuplicateIdError(err error) TicketsDuplicateIdError {
	var match TicketsDuplicateIdError
	if errors.As(err, &match) && match.Tickets() && match.DuplicateId() {
		return match
	}

	return nil
}

// ticketsDuplicateIdError indicates that an operation expected a unique identifier.
// ticketsDuplicateIdError is also a TicketsError.
type ticketsDuplicateIdError struct {
	// id the according identifier
	id uuid.UUID

	// cause refers to a causing error or nil.
	cause error
}

// ID returns the value of id.
// ID the according identifier
func (e ticketsDuplicateIdError) ID() uuid.UUID {
	return e.id
}

// Tickets returns true, if the error belongs to the sum type of Tickets.
// This implementation always returns true.
func (_ ticketsDuplicateIdError) Tickets() bool {
	return true
}

// DuplicateId returns true, if it represents a DuplicateId case.
// This implementation always returns true.
func (_ ticketsDuplicateIdError) DuplicateId() bool {
	return true
}

// Unwrap unpacks the cause or returns nil.
func (e ticketsDuplicateIdError) Unwrap() error {
	return e.cause
}

// Error returns the conventional description of this error.
func (e ticketsDuplicateIdError) Error() string {
	return fmt.Sprintf("DuplicateId: id=%v", e.id)
}

// TicketsStringNotFoundError indicates that an operation expected a exact string element which was not found.
type TicketsStringNotFoundError interface {
	// Str returns the value of str.
	// Str the related string
	Str() string

	// StringNotFound returns true, if it represents a StringNotFound case.
	StringNotFound() bool

	TicketsError
}

// AsTicketsStringNotFoundError finds the first error in err's chain that matches anyTicketsStringNotFoundError behavior.
// Returns nil if no such error is found.
func AsTicketsStringNotFoundError(err error) TicketsStringNotFoundError {
	var match TicketsStringNotFoundError
	if errors.As(err, &match) && match.Tickets() && match.StringNotFound() {
		return match
	}

	return nil
}

// ticketsStringNotFoundError indicates that an operation expected a exact string element which was not found.
// ticketsStringNotFoundError is also a TicketsError.
type ticketsStringNotFoundError struct {
	// str the related string
	str string

	// cause refers to a causing error or nil.
	cause error
}

// Str returns the value of str.
// Str the related string
func (e ticketsStringNotFoundError) Str() string {
	return e.str
}

// Tickets returns true, if the error belongs to the sum type of Tickets.
// This implementation always returns true.
func (_ ticketsStringNotFoundError) Tickets() bool {
	return true
}

// StringNotFound returns true, if it represents a StringNotFound case.
// This implementation always returns true.
func (_ ticketsStringNotFoundError) StringNotFound() bool {
	return true
}

// Unwrap unpacks the cause or returns nil.
func (e ticketsStringNotFoundError) Unwrap() error {
	return e.cause
}

// Error returns the conventional description of this error.
func (e ticketsStringNotFoundError) Error() string {
	return fmt.Sprintf("StringNotFound: str=%v", e.str)
}

// TicketsOtherError indicates any other unclassified error, like I/O failures etc.
type TicketsOtherError interface {
	// Other returns true, if it represents a Other case.
	Other() bool

	TicketsError
}

// AsTicketsOtherError finds the first error in err's chain that matches anyTicketsOtherError behavior.
// Returns nil if no such error is found.
func AsTicketsOtherError(err error) TicketsOtherError {
	var match TicketsOtherError
	if errors.As(err, &match) && match.Tickets() && match.Other() {
		return match
	}

	return nil
}

// ticketsOtherError indicates any other unclassified error, like I/O failures etc.
// ticketsOtherError is also a TicketsError.
type ticketsOtherError struct {
	// cause refers to a causing error or nil.
	cause error
}

// Tickets returns true, if the error belongs to the sum type of Tickets.
// This implementation always returns true.
func (_ ticketsOtherError) Tickets() bool {
	return true
}

// Other returns true, if it represents a Other case.
// This implementation always returns true.
func (_ ticketsOtherError) Other() bool {
	return true
}

// Unwrap unpacks the cause or returns nil.
func (e ticketsOtherError) Unwrap() error {
	return e.cause
}

// Error returns the conventional description of this error.
func (e ticketsOtherError) Error() string {
	return "Other"
}
