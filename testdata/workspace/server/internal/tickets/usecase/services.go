// Code generated by golangee/eearc; DO NOT EDIT.
//
// Copyright 2021 Torben Schinke
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package usecase

import (
	fmt "fmt"
	core "github.com/golangee/architecture/testdata/workspace/server/internal/tickets/core"
	sync "sync"
)

// Tickets is all about the tickets higher order use cases.
//
// The stereotype of this type is 'service'.
type Tickets struct {
	// myCfg is the components configuration and injected at construction time.
	myCfg MyConfig

	// tickets is the other tickets stuff
	tickets core.Tickets

	// mutex ensures that internal state is thread safe.
	mutex sync.Mutex

	defaultTickets
}

// NewTickets allocates and initializes a new Tickets instance.
//
// The parameter tickets is the other tickets stuff
func NewTickets(myCfg MyConfig, tickets core.Tickets) (*Tickets, error) {
	t := &Tickets{}
	t.myCfg = myCfg
	t.tickets = tickets

	if err := t.init(); err != nil {
		return nil, fmt.Errorf("cannot initialize 'Tickets': %w", err)
	}

	return t, nil
}

// defaultTickets is an implementation stub for Tickets.
// The sole purpose of this type is to mock the method contract and each method should be shadowed
// by a concrete implementation.
type defaultTickets struct {
}

// init is invoked from the constructor/factory function to setup any pre-variants.
// Shadow this method as required.
func (_ defaultTickets) init() error {
	return nil
}

// SayHelloTicket says hello to tickets.
// Shadow this method as required.
func (_ defaultTickets) SayHelloTicket() {
	panic("not yet implemented")
}
