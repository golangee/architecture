// Code generated by golangee/eearc; DO NOT EDIT.
//
// Copyright 2021 Torben Schinke
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package supportietyserver

import (
	fmt "fmt"
	core "github.com/golangee/architecture/testdata/workspace/server/internal/tickets/core"
	usecase "github.com/golangee/architecture/testdata/workspace/server/internal/tickets/usecase"
)

// Application aggregates all contained bounded contexts and starts their driver adapters.
type Application struct {
	ticketsUsecaseTickets *usecase.Tickets
}

func (a *Application) getTicketsUsecaseTickets(myCfg usecase.MyConfig, tickets core.Tickets) (*usecase.Tickets, error) {
	if a.ticketsUsecaseTickets != nil {
		return a.ticketsUsecaseTickets, nil
	}

	s, err := usecase.NewTickets(myCfg, tickets)
	if err != nil {
		return nil, fmt.Errorf("cannot create service 'Tickets': %w", err)
	}

	a.ticketsUsecaseTickets = s

	return s, nil
}
