// Code generated by golangee/eearc; DO NOT EDIT.

package main

import (
	context "context"
	fmt "fmt"
	supportietyserver "github.com/golangee/architecture/testdata/supportiety_render/supportiety/internal/application/supportietyserver"
	buildinfo "github.com/golangee/architecture/testdata/supportiety_render/supportiety/internal/buildinfo"
	logging "github.com/golangee/architecture/testdata/supportiety_render/supportiety/internal/logging"
	log "github.com/golangee/log"
	ecs "github.com/golangee/log/ecs"
	signal "os/signal"
	syscall "syscall"
)

func main() {
	ctx, done := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)

	logger := logging.NewLoggerFromEnv()
	logger = log.WithFields(logger,
		ecs.Log("supportiety_server"),
		log.V("build_id", buildinfo.Build.ID()),
		log.V("build_tag", buildinfo.Build.Tag()),
	)

	ctx = log.WithLogger(ctx, logger)

	err := realMain(ctx)
	done()

	if err != nil {
		logger.Println(ecs.Fatal(), err)
	}

	logger.Println(ecs.Info(), "successful shutdown")
}
func realMain(ctx context.Context) error {
	a, err := supportietyserver.NewApplication(ctx)
	if err != nil {
		return fmt.Errorf("cannot create application 'supportiety_server': %w", err)
	}

	if err := a.Run(ctx); err != nil {
		return fmt.Errorf("cannot run application 'supportiety_server': %w", err)
	}

	return nil
}
