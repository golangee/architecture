# ...describes a microservice.
module service {
	generate {
		go {
			module = "github.com/worldiety/supportiety"
			output = "../supportiety/service"
		}
	}

    # ...handles just everything about tickets.
	# see requirements::tickets::ManageTickets
	# see glossary::Ticket
	context tickets {
		domain {
			core {

			    # ...represents a data entity and sentence this must be in ellipsis summary form.
			    # = A Title is actually parsed as AST DocTitle and optional.
			    # Another arbitrary " \n text
			    #
			    # if something starts with '# see' the following tokens are parsed as a Path
			    # see requirements::tickets::ManageTickets
			    # see glossary::Ticket
			    struct Ticket {

                    # ...is the entities unique identifier.
                    # see requirements::tickets::ManageTickets
                    # see glossary::Ticket
                    ID string

                    # ...is a duplicate and will fail later.
                    ID string

                    # ...shows how to use a sub domain type as a pointer.
                    Tasks1 *tickets::domain::tasks::core::Task

                    # ...shows a slice example, using [] would require sonderlocke.
                    Tasks2 slice<string>

                    # ...shows a nested slice example.
                    KeyVal map<int,slice<tickets::domain::tasks::core::Task>>

                }

                # ...declares a repository interface.
                repository Tickets {
                    # ...searches all the things.
                    # == Parameters
                    # * x ...is a secret.
                    # * b ...is another secret.
                    # * sadly I could lie about everything, must validate later.
                    FindAll(x str, b str) -> (Task)

                    # ...searches all the things.
                    # == Returns
                    # A new Task which represents stuff to do.
                    #
                    # == Errors
                    # * NotFound ...is returned if that guy has not been found.
                    # * Other ...is returned if anything else went wrong.
                    #   Totally unspecified.
                    # * RuntimeException ...is not validated either.
                    FindAll2(x str, b str) -> (Task, error<NotFound|Other>)
                }

			}

			usecase {

			}

			:claim glossary::Task
			"... is all about tasks in the ticket domain."
			subdomain tasks {
				core {
				    # ...declares a job.
				    struct Task {
				    }
				}

				usecase {

				}
			}
		}

		infrastructure {
			mysql {
				database = "supportiety"

				impl Repository{
				}

				impl tickets::domain::core::Tickets {
		            FindAll "SELECT * FROM tickets" => (.ID, .Desc, .Name)

					FindOne "SELECT * FROM tickets where id=?" (id) => (.ID, .Name)

					Insert "INSERT INTO tickets VALUES (?, ?)" (id, id)

					InsertAll "INSERT INTO tickets VALUES (?)" (id[i])

					InsertAll2 "INSERT INTO tickets VALUES (?)" (tickets[i].ID, tickets[i].Name.First)

					Count "SELECT COUNT(*) FROM tickets" => (.)
				}
			}
		}

	}
}

# ...is another module in the same file.
module b {
	generate {
	}
}