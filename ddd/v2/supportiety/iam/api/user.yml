enum:
  # doc and right to exist is declared in glossary.yml
  Role:
    - Developer
    - ProjectManager
    - Admin
    - CustomerServiceRepresentative


struct:
  # doc and right to exist is declared in glossary.yml
  SupportietyUser:
    ID:
      doc: ... is the unique identifier.
      type: uuid
      reqt: [ bestpractices.identities ]

    Firstname:
      doc: ... is the users first name.
      type: string
      # note the requirements path syntax
      reqt: [ iam/account-details ] # todo: consistency: self defined fact is now lower case because of filename

    Lastname:
      doc: ... is the users last name.
      type: string
      reqt: [ iam/account-details ]

    PwdHash:
      doc: ... is a hashed password.
      type: slice<byte>
      reqt: [ iam/security-login ]


interface:
  # todo: want to define that only once at the top most level?
  errors:
    Other:
      doc: ...is returned if the reason is undefined, like an I/O error.
      reqt: [ errors.other ]
    NotFound:
      doc: ...is returned if an entity was expected but not found.
      reqt: [ errors.object not found ] #white space looks weired but looks fine in according yaml?
    AlreadyExists:
      doc: ...is returned if an enity should not exist but was found.
      reqt: [ errors.already exists ]

  AdminRepository:
    FindAll:
      doc: ... returns all available users.
      reqt: [ iam/admin ]
      out:
        Users: { type: slice<SupportietyUser>, doc: ... contains all found users. } # todo: uppercase named return param does not exist in any language
        error:
          - Other

    Delete:
      doc: ... deletes a single user by id.
      in:
        Id: { type: uuid, doc: ... the unique id }
      error:
        - Other
        - NotFound

    Update:
      doc: ... updates a single user by id and replace all fields.
      in:
        User: { type: SupportietyUser, doc: ... the user to update }
      error:
        - Other
        - NotFound

    Insert:
      doc: ... inserts a single user with given id.
      in:
        User: { type: SupportietyUser, doc: ... the user to insert }
      error:
        - Other
        - AlreadyExists