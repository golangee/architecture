package golang

import (
	"fmt"
	"github.com/golangee/architecture/ddd/v1"
	"github.com/golangee/src"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"unicode"
)

const (
	maxValueCitateLength = 40
)

// safename returns a lowercase name which just contains a..z, nothing else.
func safename(str string) string {
	str = strings.ToLower(str)
	sb := &strings.Builder{}
	for _, r := range str {
		if r >= 'a' && r <= 'z' {
			sb.WriteRune(r)
		}
	}
	return sb.String()
}

// findEmptyFolders returns those directories which are actually empty. Garbage files like
// .DS_Store are ignored. The map counts contains a flat key list of all folders.
func countFiles(rootDir string, counts map[string]int) error {
	files, err := ioutil.ReadDir(rootDir)
	if err != nil {
		return err
	}

	effectiveFiles := 0
	for _, file := range files {
		if file.Name() == ".DS_Store" {
			continue
		}

		effectiveFiles++
		if file.IsDir() {
			if err := countFiles(filepath.Join(rootDir, file.Name()), counts); err != nil {
				return err
			}
		}
	}

	counts[rootDir] = effectiveFiles

	return nil
}

// findMyFiles returns all those absolute file names which have the header
//    // Code generated by golangee/architecture. DO NOT EDIT.
func findMyFiles(rootDir string) ([]string, error) {
	const header = "// Code generated by golangee/architecture. DO NOT EDIT."

	var paths []string
	err := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if info.IsDir() && strings.HasPrefix(info.Name(), ".") {
			return filepath.SkipDir
		}

		if strings.HasSuffix(info.Name(), ".gen.svg") {
			paths = append(paths, path)
			return nil
		}

		if !strings.HasSuffix(info.Name(), ".go") {
			return nil
		}

		buf, err := ioutil.ReadFile(path)
		if err != nil {
			return err
		}
		if len(buf) > 200 {
			buf = buf[:200]
		}

		if strings.Contains(string(buf), header) {
			paths = append(paths, path)
		}

		return nil
	})

	return paths, err
}

func buildErr(property, value, msg string, p ddd.Pos) error {
	if len(value) > maxValueCitateLength {
		value = value[0:maxValueCitateLength-3] + "(...)"
	}
	return fmt.Errorf("%s.%s '%s': %s: %s:%d", p.Name, property, value, msg, p.File, p.Line)
}

// trimComment removes '...' and any whitespace afterwards.
func trimComment(str string) string {
	str = strings.TrimSpace(str)
	if strings.HasPrefix(str, "...") {
		str = str[3:]
	}
	return strings.TrimSpace(str)
}

// commentifyDeclName makes some readable name of it, without package qualifier etc.
func commentifyDeclName(dec *src.TypeDecl) string {
	tmp := dec.Qualifier().Name()
	for _, decl := range dec.Params() {
		tmp += commentifyDeclName(decl)
	}
	return tmp
}

// umlifyDeclName makes some readable name of it, without package qualifier etc.
func umlifyDeclName(dec *src.TypeDecl) string {
	tmp := string(dec.Qualifier())
	for _, decl := range dec.Params() {
		tmp += umlifyDeclName(decl)
	}
	return tmp
}

// makePackagePrivate converts ABc to aBc.
func makePackagePrivate(str string) string {
	if len(str) == 0 {
		return str
	}

	return string(unicode.ToLower(rune(str[0]))) + str[1:]
}

// makePublic converts aBc to ABc.
func makePublic(str string) string {
	if len(str) == 0 {
		return str
	}

	return string(unicode.ToUpper(rune(str[0]))) + str[1:]
}

// camelCaseToWords converts a text like MyBookLibrary into "my book library"
func camelCaseToWords(cc string) string {
	sb := &strings.Builder{}
	for i, r := range cc {
		if unicode.IsUpper(r) {
			if i > 0 {
				sb.WriteRune(' ')
			}
			sb.WriteRune(unicode.ToLower(r))
		} else {
			sb.WriteRune(r)
		}
	}
	return sb.String()
}

// joinSlashes assembles the path segments and ensures that they have only 1 slash per segment. Leading
// or trailing slashes are purged.
func joinSlashes(paths ...string) string {
	sb := &strings.Builder{}
	for i, path := range paths {
		path = trimSlashes(path)
		sb.WriteString(path)
		if i < len(paths)-1 {
			sb.WriteRune('/')
		}
	}

	return sb.String()
}

// trimSlashes removes leading and trailing slashes
func trimSlashes(str string) string {
	for strings.HasPrefix(str, "/") {
		str = str[1:]
	}

	for strings.HasSuffix(str, "/") {
		str = str[:len(str)-1]
	}

	return str
}

func text2GoIdentifier(p string) string {
	sb := &strings.Builder{}
	upCase := true
	for _, r := range p {
		if (r < 'a' || r > 'z') && (r < 'A' || r > 'z') && (r < '0' || r > '9') {
			upCase = true
			continue
		}

		if upCase {
			sb.WriteRune(unicode.ToUpper(r))
			upCase = false
		} else {
			sb.WriteRune(r)
		}
	}

	return sb.String()
}
