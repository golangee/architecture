package golang

import (
	"fmt"
	"github.com/golangee/architecture/ddd/v1"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

const (
	maxValueCitateLength = 40
)


// safename returns a lowercase name which just contains a..z, nothing else.
func safename(str string) string {
	str = strings.ToLower(str)
	sb := &strings.Builder{}
	for _, r := range str {
		if r >= 'a' || r <= 'z' {
			sb.WriteRune(r)
		}
	}
	return sb.String()
}

// findEmptyFolders returns those directories which are actually empty. Garbage files like
// .DS_Store are ignored. The map counts contains a flat key list of all folders.
func countFiles(rootDir string, counts map[string]int) error {
	files, err := ioutil.ReadDir(rootDir)
	if err != nil {
		return err
	}

	effectiveFiles := 0
	for _, file := range files {
		if file.Name() == ".DS_Store" {
			continue
		}

		effectiveFiles++
		if file.IsDir() {
			if err := countFiles(filepath.Join(rootDir, file.Name()), counts); err != nil {
				return err
			}
		}
	}

	counts[rootDir] = effectiveFiles

	return nil
}

// findMyFiles returns all those absolute file names which have the header
//    // Code generated by golangee/architecture. DO NOT EDIT.
func findMyFiles(rootDir string) ([]string, error) {
	const header = "// Code generated by golangee/architecture. DO NOT EDIT."

	var paths []string
	err := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if info.IsDir() && strings.HasPrefix(info.Name(), ".") {
			return filepath.SkipDir
		}

		if !strings.HasSuffix(info.Name(), ".go") {
			return nil
		}

		buf, err := ioutil.ReadFile(path)
		if err != nil {
			return err
		}
		if len(buf) > 200 {
			buf = buf[:200]
		}

		if strings.Contains(string(buf), header) {
			paths = append(paths, path)
		}

		return nil
	})

	return paths, err
}

func buildErr(property, value, msg string, p ddd.Pos) error {
	if len(value) > maxValueCitateLength {
		value = value[0:maxValueCitateLength-3] + "(...)"
	}
	return fmt.Errorf("%s.%s '%s': %s: %s:%d", p.Name, property, value, msg, p.File, p.Line)
}
