// Code generated by golangee/architecture. DO NOT EDIT.

package application

import (
	loancore "example-server/internal/loan/core"
	core "example-server/internal/search/core"
	flag "flag"
	fmt "fmt"
	os "os"
)

// App is the actual application, which glues all layers together and is launched from the command line.
type App struct {
	searchService core.SearchService
	loanService   loancore.LoanService
}

// Start launches any blocking background processes, like e.g. an http server.
func (a App) Start() error {
	return nil
}

// NewApp creates a new instance of the application and performs all parameter parsing and wiring.
func NewApp() (*App, error) {
	var err error
	options := Options{}
	options.Reset()
	if err := options.ParseEnv(); err != nil {
		return nil, err
	}
	options.ConfigureFlags()
	help := flag.Bool("help", false, "shows this help")
	flag.Parse()
	if *help {
		fmt.Println("BookLibrary")
		flag.PrintDefaults()
		os.Exit(0)
	}
	a := &App{}
	if a.searchService, err = core.SearchServiceFactory(options.SearchCoreSearchServiceOpts, nil); err != nil {
		return nil, err
	}

	if a.loanService, err = loancore.LoanServiceFactory(options.LoanCoreLoanServiceOpts); err != nil {
		return nil, err
	}

	return a, nil
}
