// Code generated by golangee/architecture. DO NOT EDIT.

package core

import (
	json "encoding/json"
	flag "flag"
	os "os"
)

// NewSecurityService is the factory function to create a new instance of SecurityService.
//
// The parameter 'opts' contains the options to create the instance.
//
// The result 'SecurityService' is the new instance or nil in case of an error.
//
// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
var NewSecurityService = func(opts SecurityServiceOpts) (SecurityService, error) {
	return &SecurityServiceMock{}, nil
}

// SecurityServiceOpts provides the options for creating a new instance of SecurityService.
type SecurityServiceOpts struct {
	// KeycloakSecret is an app secret for keycloak.
	KeycloakSecret string `json:"keycloakSecret"`
	// KeycloakUrl is the url of the keycloak service.
	KeycloakUrl string `json:"keycloakUrl"`
}

// String serializes the struct into a json string.
func (s *SecurityServiceOpts) String() string {
	buf, err := json.Marshal(s)
	if err != nil {
		panic("invalid state: " + err.Error())
	}

	return string(buf)
}

// Parse tries to parse the given buffer as json and updates the current values accordingly.
func (s *SecurityServiceOpts) Parse(buf []byte) error {
	if err := json.Unmarshal(buf, s); err != nil {
		return err
	}

	return nil
}

// ConfigureFlags configures the flags to be ready to get evaluated. The default values are taken from the struct at calling time.
// After calling, use flag.Parse() to load the values. You can only use it once, otherwise the flag package will panic.
// The following flags will be tied to this instance:
//  * KeycloakSecret is parsed from flag 'security-core-keycloaksecret'
//  * KeycloakUrl is parsed from flag 'security-core-keycloakurl'
func (s *SecurityServiceOpts) ConfigureFlags() {
	flag.StringVar(&s.KeycloakSecret, "security-core-keycloaksecret", s.KeycloakSecret, "KeycloakSecret is an app secret for keycloak.")
	flag.StringVar(&s.KeycloakUrl, "security-core-keycloakurl", s.KeycloakUrl, "KeycloakUrl is the url of the keycloak service.")
}

// Reset restores this instance to the default state.
//  * The default value of KeycloakSecret is ''.
//  * The default value of KeycloakUrl is ''.
func (s *SecurityServiceOpts) Reset() {
	s.KeycloakSecret = ""
	s.KeycloakUrl = ""
}

// ParseEnv tries to parse the environment variables into this instance. It will only set those values, which have been actually defined. If values cannot be parsed, an error is returned.
//  * KeycloakSecret is parsed from flag 'SECURITY_CORE_KEYCLOAKSECRET'
//  * KeycloakUrl is parsed from flag 'SECURITY_CORE_KEYCLOAKURL'
func (s *SecurityServiceOpts) ParseEnv() error {
	if value, ok := os.LookupEnv("SECURITY_CORE_KEYCLOAKSECRET"); ok {
		s.KeycloakSecret = value
	}

	if value, ok := os.LookupEnv("SECURITY_CORE_KEYCLOAKURL"); ok {
		s.KeycloakUrl = value
	}

	return nil
}
