// Code generated by golangee/architecture. DO NOT EDIT.

package core

import (
	context "context"
	uuid "github.com/golangee/uuid"
)

// User represents an authenticated user.
type User struct {
	// ID is the unique id of a user.
	ID uuid.UUID `json:"id"`
	// Name is the firstname of a user.
	Name string `json:"name"`
	// Age is the age in years of a user.
	Age int `json:"age"`
}

// SecurityService can authenticate and authorize a user from various sources.
type SecurityService interface {
	// FromBearer authenticates from a bearer token.
	//
	// The parameter 'ctx' is the context to control timeouts and cancellations.
	//
	// The parameter 'bearer' is the bearer token from e.g. a http header variable.
	//
	// The result 'User' is the authenticated user.
	//
	// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
	FromBearer(ctx context.Context, bearer string) (User, error)
}
