// Code generated by golangee/architecture. DO NOT EDIT.

package usecase

import (
	context "context"
	uuid "github.com/golangee/uuid"
)

// BookLoaning provides all stories around loaning books.
//
// The following user stories are covered:
//
//   * As a book loaner, I have to scan the books barcode, so that I can take it with me.
//   * As a library staff, I have to check a customers library card, so that I can ensure that only actual customers can enter and loan books.
type BookLoaning interface {
	// Rent loans a book.
	//
	// The parameter 'ctx' is the context to control timeouts and cancellations.
	//
	// The parameter 'bookId' is the id of the book.
	//
	// The parameter 'userId' is the id of the user, who loans the book.
	//
	// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
	Rent(ctx context.Context, bookId uuid.UUID, userId uuid.UUID) error
	// CheckCustomerId validates if the user is registered and active.
	//
	// The parameter 'ctx' is the context to control timeouts and cancellations.
	//
	// The parameter 'userId' is the users id.
	//
	// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
	CheckCustomerId(ctx context.Context, userId uuid.UUID) error
}
