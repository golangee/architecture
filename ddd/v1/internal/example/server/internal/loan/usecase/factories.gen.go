// Code generated by golangee/architecture. DO NOT EDIT.

package usecase

import (
	json "encoding/json"
	core "example-server/internal/loan/core"
)

// BookLoaningFactory is the factory function to create a new instance of BookLoaning.
//
// The parameter 'opts' contains the options to create the instance.
//
// The result 'BookLoaning' is the new instance or nil in case of an error.
//
// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
var BookLoaningFactory = func(opts BookLoaningOpts, loanService core.LoanService) (BookLoaning, error) {
	return &BookLoaningMock{}, nil
}

// BookLoaningOpts provides the options for creating a new instance of BookLoaning.
type BookLoaningOpts struct {
}

// String serializes the struct into a json string.
func (b *BookLoaningOpts) String() string {
	buf, err := json.Marshal(b)
	if err != nil {
		panic("invalid state: " + err.Error())
	}

	return string(buf)
}

// Parse tries to parse the given buffer as json and updates the current values accordingly.
func (b *BookLoaningOpts) Parse(buf []byte) error {
	if err := json.Unmarshal(buf, b); err != nil {
		return err
	}

	return nil
}

// ConfigureFlags configures the flags to be ready to get evaluated. The default values are taken from the struct at calling time.
// After calling, use flag.Parse() to load the values. You can only use it once, otherwise the flag package will panic.
// The following flags will be tied to this instance:
func (b *BookLoaningOpts) ConfigureFlags() {
}

// Reset restores this instance to the default state.
func (b *BookLoaningOpts) Reset() {
}

// ParseEnv tries to parse the environment variables into this instance. It will only set those values, which have been actually defined. If values cannot be parsed, an error is returned.
func (b *BookLoaningOpts) ParseEnv() error {
	return nil
}
