// Code generated by golangee/architecture. DO NOT EDIT.

package usecase

import (
	json "encoding/json"
	core "example-server/internal/search/core"
	flag "flag"
	fmt "fmt"
	os "os"
	strconv "strconv"
)

// BookSearchFactory is the factory function to create a new instance of BookSearch.
//
// The parameter 'opts' contains the options to create the instance.
//
// The result 'BookSearch' is the new instance or nil in case of an error.
//
// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
var BookSearchFactory = func(opts BookSearchOpts, searchService core.SearchService) (BookSearch, error) {
	return &BookSearchMock{}, nil
}

// BookSearchOpts provides the options for creating a new instance of BookSearch.
type BookSearchOpts struct {
	// EpicFeatureFlag turns the magic feature on, if set to true.
	EpicFeatureFlag bool `json:"epicFeatureFlag"`
}

// String serializes the struct into a json string.
func (b *BookSearchOpts) String() string {
	buf, err := json.Marshal(b)
	if err != nil {
		panic("invalid state: " + err.Error())
	}

	return string(buf)
}

// Parse tries to parse the given buffer as json and updates the current values accordingly.
func (b *BookSearchOpts) Parse(buf []byte) error {
	if err := json.Unmarshal(buf, b); err != nil {
		return err
	}

	return nil
}

// ConfigureFlags configures the flags to be ready to get evaluated. The default values are taken from the struct at calling time.
// After calling, use flag.Parse() to load the values. You can only use it once, otherwise the flag package will panic.
// The following flags will be tied to this instance:
//  * EpicFeatureFlag is parsed from flag 'search-usecases-epicfeatureflag'
func (b *BookSearchOpts) ConfigureFlags() {
	flag.BoolVar(&b.EpicFeatureFlag, "search-usecases-epicfeatureflag", b.EpicFeatureFlag, "EpicFeatureFlag turns the magic feature on, if set to true.")
}

// Reset restores this instance to the default state.
//  * The default value of EpicFeatureFlag is 'false'.
func (b *BookSearchOpts) Reset() {
	b.EpicFeatureFlag = false
}

// ParseEnv tries to parse the environment variables into this instance. It will only set those values, which have been actually defined. If values cannot be parsed, an error is returned.
//  * EpicFeatureFlag is parsed from flag 'SEARCH_USECASES_EPICFEATUREFLAG'
func (b *BookSearchOpts) ParseEnv() error {
	if value, ok := os.LookupEnv("SEARCH_USECASES_EPICFEATUREFLAG"); ok {
		v, err := strconv.ParseBool(value)
		if err != nil {
			return fmt.Errorf("cannot parse environment variable 'SEARCH_USECASES_EPICFEATUREFLAG': %w", err)
		}

		b.EpicFeatureFlag = v
	}

	return nil
}
