// Code generated by golangee/architecture. DO NOT EDIT.

// Package mysql contains specific repository implementations (aka SPI or driven adapter) for the mysql dialect.
// The repository is defined at the core layer (aka domain API).
package mysql

import (
	context "context"
	core "example-server/internal/search/core"
	fmt "fmt"
	uuid "github.com/golangee/uuid"
)

// MysqlBookRepository is an implementation of the core.BookRepository defined as SPI/driven port in the domain/core layer.
// The queries are specific for the mysql dialect.
type MysqlBookRepository struct {
	db DBTX
}

// ReadAll returns all books.
//
// The parameter 'ctx' is the context to control timeouts and cancellations.
//
// The parameter 'offset' is the offset to return the entries for paging.
//
// The parameter 'limit' is the maximum amount of entries to return.
//
// The result '[]Book' is the list of books.
//
// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
func (b *MysqlBookRepository) ReadAll(ctx context.Context, offset int64, limit int64) ([]core.Book, error) {
	const q = "SELECT * FROM book LIMIT ? OFFSET ? "
	r, err := b.db.QueryContext(ctx, q, limit, offset)
	if err != nil {
		return nil, fmt.Errorf("QueryContext failed: %w", err)

	}

	defer r.Close()
	var l []core.Book
	for r.Next() {
		var i core.Book
		if err := r.Scan(&i.ID, &i.Title); err != nil {
			return nil, fmt.Errorf("scan failed: %w", err)
		}
		l = append(l, i)
	}
	err = r.Close()
	if err != nil {
		return l, fmt.Errorf("cannot close rows: %w", err)
	}

	err = r.Err()
	if err != nil {
		return l, fmt.Errorf("query failed: %w", err)
	}

	return l, nil
}

// Count enumerates all stored elements.
//
// The parameter 'ctx' is the context to control timeouts and cancellations.
//
// The result 'int64' is the actual count.
//
// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
func (b *MysqlBookRepository) Count(ctx context.Context) (int64, error) {
	const q = "SELECT count(*) FROM book"
	var i int64
	r, err := b.db.QueryContext(ctx, q)
	if err != nil {
		return i, fmt.Errorf("QueryContext failed: %w", err)

	}

	defer r.Close()
	for r.Next() {
		if err := r.Scan(&i); err != nil {
			return i, fmt.Errorf("scan failed: %w", err)
		}
		err = r.Close()
		if err != nil {
			return i, fmt.Errorf("cannot close rows: %w", err)
		}

		err = r.Err()
		if err != nil {
			return i, fmt.Errorf("query failed: %w", err)
		}

		return i, err
	}
	return i, fmt.Errorf("empty result set")
}

// FindOne finds exactly one entry.
//
// The parameter 'ctx' is the context to control timeouts and cancellations.
//
// The parameter 'id' is the data transfer object to read into.
//
// The result 'Book' the found book.
//
// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
func (b *MysqlBookRepository) FindOne(ctx context.Context, id uuid.UUID) (core.Book, error) {
	const q = "SELECT * FROM book WHERE id=?"
	var i core.Book
	r, err := b.db.QueryContext(ctx, q, id)
	if err != nil {
		return i, fmt.Errorf("QueryContext failed: %w", err)

	}

	defer r.Close()
	for r.Next() {
		if err := r.Scan(&i.ID, &i.Title); err != nil {
			return i, fmt.Errorf("scan failed: %w", err)
		}
		err = r.Close()
		if err != nil {
			return i, fmt.Errorf("cannot close rows: %w", err)
		}

		err = r.Err()
		if err != nil {
			return i, fmt.Errorf("query failed: %w", err)
		}

		return i, err
	}
	return i, fmt.Errorf("empty result set")
}

// Insert adds some stuff.
//
// The parameter 'ctx' is the context to control timeouts and cancellations.
//
// The parameter 'dto' the book to save.
//
// The result 'error' indicates a violation of pre- or invariants and represents an implementation specific failure.
func (b *MysqlBookRepository) Insert(ctx context.Context, dto core.Book) error {
	const q = "INSERT INTO book(id) VALUES (?)"
	_, err := b.db.ExecContext(ctx, q, dto.ID)
	if err != nil {
		return fmt.Errorf("ExecContext failed: %w", err)
	}

	return nil
}

// NewMysqlBookRepository creates a new instance of MysqlBookRepository.
func NewMysqlBookRepository(db DBTX) (core.BookRepository, error) {
	return &MysqlBookRepository{db: db}, nil
}
